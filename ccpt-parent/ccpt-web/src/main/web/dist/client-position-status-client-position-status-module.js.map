{"version":3,"sources":["webpack:///./src/app/layout/client-position-status/client-position-status-routing.module.ts","webpack:///./src/app/layout/client-position-status/client-position-status.component.html","webpack:///./src/app/layout/client-position-status/client-position-status.component.scss","webpack:///./src/app/layout/client-position-status/client-position-status.component.ts","webpack:///./src/app/layout/client-position-status/client-position-status.model.ts","webpack:///./src/app/layout/client-position-status/client-position-status.module.ts"],"names":[],"mappings":"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","file":"client-position-status-client-position-status-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { ClientPositionStatusComponent } from \"./client-position-status.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ClientPositionStatusComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClientPositionStatusRoutingModule {}\n","module.exports = \"<div [@routerTransition]>\\n  <app-page-header [icon1]=\\\"'fa-sticky-note'\\\" [heading1]=\\\"'Metadata'\\\" [icon2]=\\\"'fa-filter'\\\"\\n    [heading2]=\\\"'Client Position Status'\\\"></app-page-header>\\n  <ng-template #spinner>\\n    <div class=\\\"spinner padding-top justify-content-md-center\\\">\\n      <div class=\\\"bounce1\\\"></div>\\n      <div class=\\\"bounce2\\\"></div>\\n      <div class=\\\"bounce3\\\"></div>\\n    </div>\\n  </ng-template>\\n  <div class=\\\"row\\\" *ngIf=\\\"listReturned == true; else spinner\\\">\\n    <div class=\\\"col-md-7\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\"> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"search...\\\"\\n            [(ngModel)]=\\\"currSearchTxt\\\" /></div>\\n      </div>\\n      <div class=\\\"table-responsive mt-2 tableFixHead\\\" [style.height.px]=\\\"screenHeight\\\">\\n        <table class=\\\"table table-hover table-striped\\\">\\n\\n          <tbody>\\n            <tr *ngFor=\\\"let cpsl of clientPositionStatusList.list |   paginate: paginateConfig ; let i = index\\\"\\n              (click)=\\\"setModel(cpsl.id)\\\">\\n              <td>\\n                {{cpsl.description}}</td>\\n              <td>\\n                {{cpsl.code}}\\n              </td>\\n              <td>\\n                {{cpsl.statusType}}\\n              </td>\\n              <!-- <td width=\\\"100\\\">\\n                <app-action [trashContent]=\\\"trashContent\\\" [id]=\\\"cpsl.id\\\" [isTrash]=\\\"trash\\\" (trash)=\\\"open($event)\\\"></app-action>\\n              </td> -->\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"col-12 justify-content-center mb-5\\\"\\n        *ngIf=\\\"clientPositionStatusList.noOfRecords > properties.ITEMSPERPAGE\\\">\\n        <pagination-controls (pageChange)=\\\"pageChanged($event)\\\"></pagination-controls>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-5\\\">\\n      <form name=\\\"form\\\" id=\\\"clientPositionStatusForm\\\" (ngSubmit)=\\\"f.form.valid&&create(f)\\\" #f=\\\"ngForm\\\" novalidate>\\n        <div class=\\\"row text-center\\\">\\n          <div class=\\\"col-md-12 form-group\\\">\\n            <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">Add</button>\\n            <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n              (click)=\\\"update(f)\\\">Update</button>\\n            <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n                (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n            <button type=\\\"button\\\" (click)=\\\"cancelForm(f)\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              *ngIf=\\\"enableButtonType == '' || enableButtonType == 'U'\\\">\\n              {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n            </button>\\n\\n            <span class=\\\"pull-right\\\" *ngIf=\\\"showAction && readOnlyForm == 'R'\\\">\\n              <div class=\\\"dropdown theme-dropdown clearfix\\\" placement=\\\"bottom-right\\\" ngbDropdown>\\n                <!-- <button class=\\\"btn btn-secondary\\\" >\\n                              Dropdown\\n                          </button> -->\\n                <i class=\\\"fa fa-bars\\\" ngbDropdownToggle></i>\\n                <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" ngbDropdownMenu>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"enableFormEditable()\\\">Edit</a>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"cancelForm(f)\\\">New</a>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"open(model.id, trashContent)\\\">Delete</a>\\n                </div>\\n              </div>\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Code<span class=\\\"required\\\">*</span></label>\\n              <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R' || readOnlyForm == 'U'\\\" maxlength=\\\"30\\\"\\n                [(ngModel)]=\\\"model.code\\\" name=\\\"code\\\" [ngClass]=\\\"{'is-invalid': f.submitted && code.invalid}\\\"\\n                #code=\\\"ngModel\\\" required>\\n              <div class=\\\"invalid-feedback\\\">\\n                code is mandatory\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Status Type<span class=\\\"required\\\">*</span></label>\\n              <select class=\\\"form-control\\\" name=\\\"statustype\\\" [disabled]=\\\"readOnlyForm == 'R'\\\"\\n                [(ngModel)]=\\\"model.statusType\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && statustype.invalid }\\\"\\n                #statustype=\\\"ngModel\\\" required>\\n                <option *ngFor=\\\"let stl of properties.STATUS\\\" [ngValue]=\\\"stl\\\">\\n                  {{ stl }}\\n                </option>\\n              </select>\\n              <div class=\\\"invalid-feedback\\\">\\n                Status Type is mandatory\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Order<span class=\\\"required\\\">*</span></label>\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R' \\\" [(ngModel)]=\\\"model.ordr\\\"\\n                name=\\\"order\\\" [ngClass]=\\\"{'is-invalid': f.submitted && order.invalid}\\\" #order=\\\"ngModel\\\" required>\\n              <div class=\\\"invalid-feedback\\\">\\n                order is mandatory\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Description<span class=\\\"required\\\">*</span></label>\\n              <textarea cols=\\\"10\\\" rows=\\\"10\\\" class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                [(ngModel)]=\\\"model.description\\\" name=\\\"decription\\\"\\n                [ngClass]=\\\"{'is-invalid': f.submitted && description.invalid}\\\" #description=\\\"ngModel\\\"\\n                required></textarea>\\n              <div class=\\\"invalid-feedback\\\">\\n                description is mandatory\\n              </div>\\n            </div>\\n          </div>\\n\\n        </div>\\n        <div class=\\\"row text-center\\\">\\n          <div class=\\\"col-md-12\\\">\\n            <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">Add</button>\\n            <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n              (click)=\\\"update(f)\\\">Update</button>\\n            <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n              (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n            <button type=\\\"button\\\" (click)=\\\"cancelForm(f)\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              *ngIf=\\\"enableButtonType == '' || enableButtonType == 'U'\\\">\\n              {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n            </button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n\\n</div>\\n\\n<ng-template #trashContent let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n  <div class=\\\"modal-header modal-popup-header-bg\\\">\\n    <h4 class=\\\"modal-title\\\">Client Position Status</h4>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <p>Are you sure you want to delete ? &hellip;</p>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"trash()\\\">Ok</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Close</button>\\n  </div>\\n</ng-template>\\n\"","module.exports = \".required {\\n  color: red; }\\n\\n.my-custom-scrollbar {\\n  position: relative;\\n  height: 31.5em;\\n  overflow: auto; }\\n\\n.table-wrapper-scroll-y {\\n  display: block; }\\n\\n.padding-top {\\n  padding-top: 60px; }\\n\\n.dropdown-toggle::after {\\n  display: none; }\\n\\n.drop-list:hover {\\n  cursor: pointer; }\\n\\n.table-striped tbody tr:nth-of-type(odd) {\\n  background-color: #c1c1c1; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2NsaWVudC1wb3NpdGlvbi1zdGF0dXMvRDpcXGNjcHR0b29sLmdpdFxcdHJ1bmtcXGNjcHQtcGFyZW50XFxjY3B0LXdlYlxcc3JjXFxtYWluXFx3ZWIvc3JjXFxhcHBcXGxheW91dFxcY2xpZW50LXBvc2l0aW9uLXN0YXR1c1xcY2xpZW50LXBvc2l0aW9uLXN0YXR1cy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVUsRUFDWDs7QUFDRDtFQUNFLG1CQUFrQjtFQUNsQixlQUFjO0VBQ2QsZUFBYyxFQUNmOztBQUNEO0VBQ0UsZUFBYyxFQUNmOztBQUNEO0VBQ0Usa0JBQWlCLEVBQ2xCOztBQUNEO0VBQ0UsY0FBYSxFQUNkOztBQUNEO0VBQ0UsZ0JBQWUsRUFDaEI7O0FBQ0Q7RUFFSSwwQkFBeUIsRUFDMUIiLCJmaWxlIjoic3JjL2FwcC9sYXlvdXQvY2xpZW50LXBvc2l0aW9uLXN0YXR1cy9jbGllbnQtcG9zaXRpb24tc3RhdHVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlcXVpcmVkIHtcclxuICBjb2xvcjogcmVkO1xyXG59XHJcbi5teS1jdXN0b20tc2Nyb2xsYmFyIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiAzMS41ZW07XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbn1cclxuLnRhYmxlLXdyYXBwZXItc2Nyb2xsLXkge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbi5wYWRkaW5nLXRvcCB7XHJcbiAgcGFkZGluZy10b3A6IDYwcHg7XHJcbn1cclxuLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLmRyb3AtbGlzdDpob3ZlciB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcbi50YWJsZS1zdHJpcGVkIHtcclxuICB0Ym9keSB0cjpudGgtb2YtdHlwZShvZGQpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMWMxYzE7XHJcbiAgfVxyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, HostListener } from \"@angular/core\";\nimport { routerTransition } from \"../../router.animations\";\nimport {\n  ClientpositionStatusModel,\n  ActionsList\n} from \"./client-position-status.model\";\nimport { HttpClientService } from \"src/app/shared/services/http.service\";\nimport { ToastrCustomService } from \"src/app/shared/services/toastr.service\";\nimport { URLConstants } from \"../components/constants/url-constants\";\nimport { Properties } from \"../components/constants/properties\";\nimport { NgForm } from \"@angular/forms\";\nimport {\n  NgbModal,\n  ModalDismissReasons,\n  NgbModalRef\n} from \"@ng-bootstrap/ng-bootstrap\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-client-position-status\",\n  templateUrl: \"./client-position-status.component.html\",\n  styleUrls: [\"./client-position-status.component.scss\"],\n  animations: [routerTransition()]\n})\nexport class ClientPositionStatusComponent implements OnInit {\n  public model: ClientpositionStatusModel = <ClientpositionStatusModel>{};\n  public clientPositionStatusList: any = [];\n  private urlConstants = new URLConstants();\n  public properties = new Properties();\n  public formButtonsToggler = true;\n  public editButtonToggler = true;\n  private selectedRecrdToDel = 0;\n  public closeResult = \"\";\n  private modalRef: NgbModalRef;\n  public currSearchTxt: string;\n  public readOnlyForm = \"\";\n  public enableButtonType = \"\";\n  public screenHeight: any;\n  public isCreate: boolean = false;\n  public showAction: boolean = false;\n  public actionsList = new ActionsList();\n  public action: string = null;\n  public listReturned: boolean;\n  public paginateConfig: any = {\n    itemsPerPage: this.properties.ITEMSPERPAGE,\n    currentPage: 1,\n    totalItems: 0\n  };\n  constructor(\n    private http: HttpClientService,\n    private router: Router,\n    private toastr: ToastrCustomService,\n    private modalService: NgbModal\n  ) {\n    this.getScreenSize();\n  }\n  @HostListener(\"window:resize\", [\"$event\"])\n  getScreenSize(event?) {\n    this.screenHeight = window.innerHeight;\n  }\n  ngOnInit() {\n    /*Autheticate user with the token */\n    if (!this.http.isAuthenticate()) {\n      this.router.navigate([\"/login\"]);\n    }\n    this.init();\n    this.initialGetAll();\n    this.spinner(true);\n  }\n  init() {\n    this.spinner(false);\n    this.http.get(this.urlConstants.CPSGetAll).subscribe(resp => {\n      this.spinner(true);\n      this.clientPositionStatusList = resp as Array<ClientpositionStatusModel>;\n    });\n  }\n  public initialGetAll() {\n    let pageNumber = this.paginateConfig.currentPage - 1;\n    let temp = this.http.get(\n      this.urlConstants.CPSGetAll + pageNumber + \"&pageSize=50&sortBy=id\"\n    );\n    temp.subscribe(resp => {\n      this.clientPositionStatusList = resp as any;\n      //this.pageChange(this.page);\n      this.paginateConfig.totalItems = this.clientPositionStatusList.noOfRecords;\n    });\n  }\n  public dblSetModel() {\n    this.readOnlyForm = \"U\";\n    this.enableButtonType = \"U\";\n    this.showAction = true;\n    this.action = null;\n  }\n  private enableFormEditable(): void {\n    this.readOnlyForm = \"U\";\n    this.enableButtonType = \"U\";\n  }\n  public setModel(id) {\n    this.spinner(false);\n    this.getById(id);\n    this.readOnlyForm = \"R\";\n    this.enableButtonType = \"E\";\n    this.showAction = true;\n    this.action = null;\n  }\n  private getById(id) {\n    this.http.get(this.urlConstants.CPSGetById + id).subscribe(resp => {\n      this.model = this.mapToUpdateModel(resp);\n      this.spinner(true);\n    });\n  }\n  private mapToUpdateModel(response) {\n    const temp = response;\n    this.model = temp;\n    return this.model;\n  }\n  private formReset() {\n    this.model = <ClientpositionStatusModel>{};\n  }\n  public create(clientPositionStatusForm: NgForm): void {\n    this.isCreate = true;\n    this.spinner(false);\n    this.http.post(this.model, this.urlConstants.CPSCreate).subscribe(\n      resp => {\n        this.toastr.success(this.properties.CREATE, this.properties.POS_STATUS);\n        this.init();\n        this.formReset();\n        this.spinner(true);\n        this.paginateConfig.currentPage = 1;\n        this.initialGetAll();\n        clientPositionStatusForm.resetForm();\n        this.isCreate = false;\n      },\n      err => {\n        this.toastr.error(err.error.message, this.properties.POS_STATUS);\n        this.isCreate = false;\n        this.spinner(true);\n      }\n    );\n  }\n  public update(clientApplicationStatusForm: NgForm) {\n    this.spinner(false);\n    this.http.update(this.model, this.urlConstants.CPSUpdate).subscribe(\n      resp => {\n        this.toastr.success(this.properties.UPDATE, this.properties.POS_STATUS);\n        this.formReset();\n        this.init();\n        this.initialGetAll();\n        this.spinner(true);\n        clientApplicationStatusForm.resetForm();\n        this.readOnlyForm = \"\";\n        this.enableButtonType = \"\";\n        this.showAction = false;\n      },\n      err => {\n        this.toastr.error(err.error.message, this.properties.POS_STATUS);\n        this.spinner(true);\n      }\n    );\n  }\n  // editableForm(){\n  //     if(this.readOnlyForm==true){\n  //         this.readOnlyForm=false;\n  //     }\n  //     if(this.editButtonToggler==true){\n  //         this.editButtonToggler=false;\n  //     }\n  // }\n  public cancelForm(clientApplicationStatusForm: NgForm) {\n    this.formReset();\n    clientApplicationStatusForm.resetForm();\n    this.readOnlyForm = \"\";\n    this.enableButtonType = \"\";\n    this.showAction = false;\n  }\n  public trash(): void {\n    this.spinner(false);\n    this.http\n      .delete(this.urlConstants.CPSDelete + this.selectedRecrdToDel)\n      .subscribe(\n        resp => {\n          this.toastr.success(\n            this.properties.UPDATE,\n            this.properties.POS_STATUS\n          );\n          this.init();\n          this.close();\n          this.formReset();\n          this.initialGetAll();\n          this.spinner(true);\n          this.readOnlyForm = \"\";\n          this.enableButtonType = \"\";\n          this.showAction = false;\n        },\n        err => {\n          this.toastr.error(err.error.message, this.properties.POS_STATUS);\n          this.spinner(true);\n        }\n      );\n  }\n  public actions(value, trashContent, form) {\n    console.log(value);\n    switch (value) {\n      case \"Delete\": {\n        this.open(this.model.id, trashContent);\n        break;\n      }\n      case \"Edit\": {\n        this.enableFormEditable();\n        break;\n      }\n      case \"Close\": {\n        this.cancelForm(form);\n      }\n    }\n  }\n  /**\n   * @param\n   * 1) content consists the modal instance\n   * 2) Selected contains the code of selected row\n   */\n  public open(event: any, content) {\n    if (event) {\n      this.selectedRecrdToDel = event;\n    }\n    this.modalRef = this.modalService.open(content);\n    this.modalRef.result.then(\n      result => {\n        this.closeResult = `Closed with: ${result}`;\n      },\n      reason => {\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n      }\n    );\n  }\n  public close() {\n    this.modalRef.close();\n  }\n  private getDismissReason(reason: any): string {\n    if (reason === ModalDismissReasons.ESC) {\n      return \"by pressing ESC\";\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return \"by clicking on a backdrop\";\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n  private spinner(isSpinner: boolean) {\n    this.listReturned = isSpinner;\n  }\n  pageChanged(event) {\n    this.paginateConfig.currentPage = event;\n    this.initialGetAll();\n  }\n}\n","export interface ClientpositionStatusModel {\r\n  description: string;\r\n  code: string;\r\n  statusType: string;\r\n  id: number;\r\n  ordr: number;\r\n}\r\nexport class ActionsList {\r\n  actions = [\r\n    { key: \"Edit\", value: \"Edit\" },\r\n    { key: \"Delete\", value: \"Delete\" },\r\n    { key: \"Close\", value: \"Close\" }\r\n  ];\r\n}\r\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport {\n  PageHeaderModule,\n  SharedPipesModule,\n  ActionListModule\n} from \"../../shared\";\nimport { ClientPositionStatusRoutingModule } from \"./client-position-status-routing.module\";\nimport { ClientPositionStatusComponent } from \"./client-position-status.component\";\nimport { NgbModule, NgbActiveModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ClientPositionStatusRoutingModule,\n    FormsModule,\n    PageHeaderModule,\n    NgbModule,\n    SharedPipesModule,\n    ActionListModule,\n    NgxPaginationModule\n  ],\n  declarations: [ClientPositionStatusComponent],\n  providers: [NgbActiveModal]\n})\nexport class ClientPositionStatusModule {}\n"],"sourceRoot":""}