{"version":3,"sources":["webpack:///./src/app/layout/email-template/email-template-routing.module.ts","webpack:///./src/app/layout/email-template/email-template.component.html","webpack:///./src/app/layout/email-template/email-template.component.scss","webpack:///./src/app/layout/email-template/email-template.component.ts","webpack:///./src/app/layout/email-template/email-template.model.ts","webpack:///./src/app/layout/email-template/email-template.module.ts"],"names":[],"mappings":"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","file":"email-template-email-template-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { EmailTemplateComponent } from \"./email-template.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: EmailTemplateComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmailTemplateRoutingModule {}\n","module.exports = \"<div [@routerTransition]>\\n    <app-page-header [icon2]=\\\"'fa-envelope'\\\" [heading2]=\\\"'Emails'\\\" [icon1]=\\\"'fa-inbox'\\\"\\n    [heading1]=\\\"'Communication'\\\"></app-page-header>\\n    <ng-template #spinner >\\n        <div class=\\\"spinner padding-top justify-content-md-center\\\">\\n          <div class=\\\"bounce1\\\"></div>\\n          <div class=\\\"bounce2\\\"></div>\\n          <div class=\\\"bounce3\\\"></div>\\n      </div>\\n      </ng-template>\\n  <div class=\\\"row\\\" *ngIf=\\\"listReturned == true; else spinner\\\">\\n    <div class=\\\"col-md-7\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\"> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"search...\\\"\\n            [(ngModel)]=\\\"currSearchTxt\\\" /></div>\\n      </div>\\n      <div class=\\\"table-responsive mt-2 tableFixHead\\\" [style.height.px]=\\\"screenHeight\\\">\\n        <table class=\\\"table table-hover table-striped\\\">\\n          <tbody>\\n            <tr *ngFor=\\\"let etl of emailTemplateList.list | paginate: paginateConfig  ; let i = index\\\"\\n              (click)=\\\"setModel(etl.id)\\\">\\n              <td>\\n                {{etl.type}}\\n              </td>\\n              <!-- <td width=\\\"100\\\">\\n                <app-action [trashContent]=\\\"trashContent\\\" [id]=\\\"etl.id\\\" [isTrash]=\\\"trash\\\" (trash)=\\\"open($event)\\\"></app-action>\\n              </td> -->\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"col-12 justify-content-center mb-5\\\" *ngIf=\\\"emailTemplateList.noOfRecords > properties.ITEMSPERPAGE\\\">\\n        <pagination-controls (pageChange)=\\\"pageChanged($event)\\\"></pagination-controls>\\n      </div>\\n    </div>\\n    <div class=\\\" col-md-5\\\">\\n      <form name=\\\"form\\\" id=\\\"emailTemplateForm\\\" (ngSubmit)=\\\"f.form.valid&&create(f)\\\" #f=\\\"ngForm\\\" novalidate>\\n          <div class=\\\"row text-center\\\">\\n              <div class=\\\"col-md-12 form-group\\\">\\n               <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\" [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">Add</button>\\n                <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n                  (click)=\\\"update(f)\\\">Update</button>\\n                <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n                  (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n                  <button type=\\\"button\\\" (click)=\\\"cancelForm(f)\\\" class=\\\"btn btn-secondary ml-3\\\" *ngIf=\\\"enableButtonType == '' || enableButtonType == 'U'\\\">\\n                      {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n                    </button>\\n        \\n                    <span class=\\\"pull-right\\\" *ngIf=\\\"showAction && readOnlyForm == 'R'\\\">\\n                        <div class=\\\"dropdown theme-dropdown clearfix\\\" placement=\\\"bottom-right\\\" ngbDropdown>\\n                            <!-- <button class=\\\"btn btn-secondary\\\" >\\n                                Dropdown\\n                            </button> -->\\n                            <i class=\\\"fa fa-bars\\\" ngbDropdownToggle></i>\\n                            <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" ngbDropdownMenu>\\n                                <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"enableFormEditable()\\\">Edit</a>\\n                                <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"cancelForm(f)\\\">New</a>\\n                                <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"open(model.id, trashContent)\\\">Delete</a>\\n                            </div>\\n                        </div> \\n                    </span>    \\n                  </div>\\n            </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Type<span class=\\\"required\\\">*</span></label>\\n              <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.type\\\"\\n                name=\\\"type\\\" [ngClass]=\\\"{'is-invalid': f.submitted && type.invalid}\\\" #type=\\\"ngModel\\\" required>\\n              <div class=\\\"invalid-feedback\\\">\\n                type is mandatory\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Subject<span class=\\\"required\\\">*</span></label>\\n              <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.subject\\\"\\n                name=\\\"subject\\\" [ngClass]=\\\"{'is-invalid': f.submitted && subject.invalid}\\\" #subject=\\\"ngModel\\\" required>\\n\\n              <div class=\\\"invalid-feedback\\\">\\n                subject is mandatory\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <label>Body<span class=\\\"required\\\">*</span></label>\\n              <textarea class=\\\"form-control\\\" cols=\\\"5\\\" rows=\\\"13\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                [(ngModel)]=\\\"model.description\\\" name=\\\"notes\\\"\\n                [ngClass]=\\\"{'is-invalid': f.submitted && notes.invalid}\\\" #notes=\\\"ngModel\\\" required></textarea>\\n              <div class=\\\"invalid-feedback\\\">\\n                Body is mandatory\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"row text-center\\\">\\n          <div class=\\\"col-md-12\\\">\\n           <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\" [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">Add</button>\\n            <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n              (click)=\\\"update(f)\\\">Update</button>\\n            <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n              (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n              <button type=\\\"button\\\" (click)=\\\"cancelForm(f)\\\" class=\\\"btn btn-secondary ml-3\\\" *ngIf=\\\"enableButtonType == '' || enableButtonType == 'U'\\\">\\n                  {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n                </button>    \\n              </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n<ng-template #trashContent let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n  <div class=\\\"modal-header modal-popup-header-bg\\\">\\n    <h4 class=\\\"modal-title\\\">Email Template</h4>\\n    <button type=\\\"button\\\"  class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <p>Are you sure you want to delete ? &hellip;</p>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"trash()\\\">Ok</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Close</button>\\n  </div>\\n</ng-template>\"","module.exports = \".required {\\n  color: red; }\\n\\n.my-custom-scrollbar {\\n  position: relative;\\n  height: 31.5em;\\n  overflow: auto; }\\n\\n.table-wrapper-scroll-y {\\n  display: block; }\\n\\n.padding-top {\\n  padding-top: 60px; }\\n\\n.dropdown-toggle::after {\\n  display: none; }\\n\\n.drop-list:hover {\\n  cursor: pointer; }\\n\\n.table-striped tbody tr:nth-of-type(odd) {\\n  background-color: #c1c1c1; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2VtYWlsLXRlbXBsYXRlL0Q6XFxjY3B0dG9vbC5naXRcXHRydW5rXFxjY3B0LXBhcmVudFxcY2NwdC13ZWJcXHNyY1xcbWFpblxcd2ViL3NyY1xcYXBwXFxsYXlvdXRcXGVtYWlsLXRlbXBsYXRlXFxlbWFpbC10ZW1wbGF0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVUsRUFDWDs7QUFDRDtFQUNFLG1CQUFrQjtFQUNsQixlQUFjO0VBQ2QsZUFBYyxFQUNiOztBQUNEO0VBQ0EsZUFBYyxFQUNiOztBQUNEO0VBQ0Msa0JBQWlCLEVBQ2xCOztBQUNEO0VBQ0MsY0FBWSxFQUNiOztBQUNEO0VBQ0UsZ0JBQWUsRUFDaEI7O0FBQ0Q7RUFFSSwwQkFBeUIsRUFDMUIiLCJmaWxlIjoic3JjL2FwcC9sYXlvdXQvZW1haWwtdGVtcGxhdGUvZW1haWwtdGVtcGxhdGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVxdWlyZWQge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICB9XHJcbiAgLm15LWN1c3RvbS1zY3JvbGxiYXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgaGVpZ2h0OiAzMS41ZW07XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIH1cclxuICAgIC50YWJsZS13cmFwcGVyLXNjcm9sbC15IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG4gICAgLnBhZGRpbmctdG9we1xyXG4gICAgIHBhZGRpbmctdG9wOiA2MHB4O1xyXG4gICB9XHJcbiAgIC5kcm9wZG93bi10b2dnbGU6OmFmdGVye1xyXG4gICAgZGlzcGxheTpub25lO1xyXG4gIH1cclxuICAuZHJvcC1saXN0OmhvdmVye1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICAudGFibGUtc3RyaXBlZCB7XHJcbiAgICB0Ym9keSB0cjpudGgtb2YtdHlwZShvZGQpIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2MxYzFjMTtcclxuICAgIH1cclxuIH0iXX0= */\"","import { Component, OnInit, HostListener } from \"@angular/core\";\nimport { routerTransition } from \"../../router.animations\";\nimport { HttpClientService } from \"src/app/shared/services/http.service\";\nimport { URLConstants } from \"../components/constants/url-constants\";\nimport { ToastrCustomService } from \"src/app/shared/services/toastr.service\";\nimport {\n  NgbModal,\n  ModalDismissReasons,\n  NgbModalRef\n} from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgForm } from \"@angular/forms\";\nimport { EmailTemplateModel, ActionsList } from \"./email-template.model\";\nimport { Router } from \"@angular/router\";\nimport { Properties } from \"../components/constants/properties\";\n\n@Component({\n  selector: \"app-email-template\",\n  templateUrl: \"./email-template.component.html\",\n  styleUrls: [\"./email-template.component.scss\"],\n  animations: [routerTransition()]\n})\nexport class EmailTemplateComponent implements OnInit {\n  public model: EmailTemplateModel = <EmailTemplateModel>{};\n  public emailTemplateList: any = [];\n  private urlConstants = new URLConstants();\n  public properties = new Properties();\n  public readOnlyForm = \"\";\n  public enableButtonType = \"\";\n  public currSearchTxt = \"\";\n  public isCreate: boolean = false;\n  public showAction: boolean = false;\n  public actionsList = new ActionsList();\n  public action: string = null;\n  public listReturned: boolean;\n\n  private selectedRecrdToDel = 0;\n  public closeResult = \"\";\n  private modalRef: NgbModalRef;\n  public screenHeight: any;\n  public paginateConfig: any = {\n    itemsPerPage: this.properties.ITEMSPERPAGE,\n    currentPage: 1,\n    totalItems: 0\n  };\n  constructor(\n    private http: HttpClientService,\n    private router: Router,\n    private toastr: ToastrCustomService,\n    private modalService: NgbModal\n  ) {\n    this.getScreenSize();\n  }\n  @HostListener(\"window:resize\", [\"$event\"])\n  getScreenSize(event?) {\n    this.screenHeight = window.innerHeight;\n  }\n  ngOnInit() {\n    /*Autheticate user with the token */\n    if (!this.http.isAuthenticate()) {\n      this.router.navigate([\"/login\"]);\n    }\n    this.init();\n    this.initialGetAll();\n    this.spinner(true);\n  }\n  private init() {\n    // this.spinner(false);\n    // this.http.get(this.urlConstants.EmailTemplateGetAll).subscribe(resp => {\n    //     this.emailTemplateList = resp as any;\n    //     this.spinner(true);\n    // });\n  }\n  public initialGetAll() {\n    let pageNumber = this.paginateConfig.currentPage - 1;\n    let temp = this.http.get(\n      this.urlConstants.EmailTemplateGetAll +\n        pageNumber +\n        \"&pageSize=50&sortBy=id\"\n    );\n    temp.subscribe(resp => {\n      this.emailTemplateList = resp as any;\n      //this.pageChange(this.page);\n      this.paginateConfig.totalItems = this.emailTemplateList.noOfRecords;\n    });\n  }\n  public dblSetModel(data) {\n    this.model = JSON.parse(JSON.stringify(data));\n    this.readOnlyForm = \"U\";\n    this.enableButtonType = \"U\";\n    this.showAction = true;\n    this.action = null;\n  }\n  public enableFormEditable(): void {\n    this.readOnlyForm = \"U\";\n    this.enableButtonType = \"U\";\n  }\n  public setModel(id) {\n    this.getEmailById(id);\n    this.readOnlyForm = \"R\";\n    this.enableButtonType = \"E\";\n    this.showAction = true;\n    this.action = null;\n  }\n  private getEmailById(id: number) {\n    const temp = this.http.get(this.urlConstants.EmailTemplateGetById + id);\n    temp.subscribe(resp => {\n      this.model = this.mapToUpdateModel(resp);\n    });\n  }\n  private mapToUpdateModel(response): EmailTemplateModel {\n    const temp = response;\n    this.model = temp;\n    return this.model;\n  }\n  private formReset() {\n    this.model = <EmailTemplateModel>{};\n  }\n  public create(emailTemplateForm: NgForm): void {\n    this.isCreate = true;\n    this.spinner(false);\n    const temp = this.http.post(\n      this.model,\n      this.urlConstants.EmailTemplateCreate\n    );\n    temp.subscribe(\n      resp => {\n        this.toastr.success(this.properties.CREATE, \"Contact\");\n        this.init();\n        this.formReset();\n        emailTemplateForm.resetForm();\n        this.initialGetAll();\n        this.spinner(true);\n        this.paginateConfig.currentPage = 1;\n        this.isCreate = false;\n      },\n      err => {\n        this.toastr.error(err.statusText, \"Contact\");\n        this.isCreate = false;\n      }\n    );\n  }\n  public update(emailTemplateForm: NgForm) {\n    this.spinner(false);\n    const temp = this.http.update(\n      this.model,\n      this.urlConstants.EmailTemplateUpdate\n    );\n    temp.subscribe(\n      resp => {\n        this.formReset();\n        this.toastr.success(this.properties.UPDATE, \"Email Template \");\n        this.init();\n        emailTemplateForm.resetForm();\n        this.initialGetAll();\n        this.spinner(true);\n        this.readOnlyForm = \"\";\n        this.enableButtonType = \"\";\n        this.showAction = false;\n      },\n      err => {\n        this.toastr.error(err.statusText, \"Email Template \");\n      }\n    );\n  }\n  public cancelForm(emailTemplateForm: NgForm) {\n    this.formReset();\n    emailTemplateForm.resetForm();\n    this.readOnlyForm = \"\";\n    this.enableButtonType = \"\";\n    this.showAction = false;\n  }\n  public trash(): void {\n    this.spinner(false);\n    const temp = this.http.delete(\n      this.urlConstants.EmailTemplateDelete + this.selectedRecrdToDel\n    );\n    temp.subscribe(\n      resp => {\n        this.toastr.success(this.properties.DELETE, \"Client\");\n        this.init();\n        this.close();\n        this.formReset();\n        this.initialGetAll();\n        this.spinner(true);\n        this.showAction = false;\n      },\n      err => {\n        if (err.status === 200) {\n          this.init();\n          this.close();\n          this.formReset();\n          return this.toastr.success(this.properties.DELETE, \"Client\");\n        }\n        this.toastr.error(err.error.message, \"Client\");\n      }\n    );\n  }\n  /**\n   * @param\n   * 1) content consists the modal instance\n   * 2) Selected contains the code of selected row\n   */\n  public open(event: any, content: any) {\n    if (event) {\n      this.selectedRecrdToDel = event;\n    }\n    this.modalRef = this.modalService.open(content);\n    this.modalRef.result.then(\n      result => {\n        this.closeResult = `Closed with: ${result}`;\n      },\n      reason => {\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n      }\n    );\n  }\n  public close() {\n    this.modalRef.close();\n  }\n  private getDismissReason(reason: any): string {\n    if (reason === ModalDismissReasons.ESC) {\n      return \"by pressing ESC\";\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return \"by clicking on a backdrop\";\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n  private spinner(isSpinner: boolean) {\n    this.listReturned = isSpinner;\n  }\n  pageChanged(event) {\n    this.paginateConfig.currentPage = event;\n    this.initialGetAll();\n  }\n}\n","export interface EmailTemplateModel {\r\n    id: string;\r\n    type: string;\r\n    subject: string;\r\n    description: string;\r\n}\r\nexport class ActionsList {\r\n    actions = [{key: 'Edit' , value:'Edit'}, {key: 'Delete' , value:'Delete'}, {key: 'Close' , value:'Close'}];\r\n}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport {\n  PageHeaderModule,\n  SharedPipesModule,\n  ActionListModule\n} from \"../../shared\";\nimport { EmailTemplateRoutingModule } from \"./email-template-routing.module\";\nimport { EmailTemplateComponent } from \"./email-template.component\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\n\n@NgModule({\n  imports: [\n    NgbModule,\n    NgxPaginationModule,\n    CommonModule,\n    EmailTemplateRoutingModule,\n    FormsModule,\n    PageHeaderModule,\n    SharedPipesModule,\n    ActionListModule\n  ],\n  declarations: [EmailTemplateComponent]\n})\nexport class EmailTemplateModule {}\n"],"sourceRoot":""}