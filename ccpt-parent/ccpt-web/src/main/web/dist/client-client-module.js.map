{"version":3,"sources":["webpack:///./src/app/layout/client/client-routing.module.ts","webpack:///./src/app/layout/client/client.component.html","webpack:///./src/app/layout/client/client.component.scss","webpack:///./src/app/layout/client/client.component.ts","webpack:///./src/app/layout/client/client.module.ts"],"names":[],"mappings":"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","file":"client-client-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { ClientComponent } from \"./client.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ClientComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClientRoutingModule {}\n","module.exports = \"<div [@routerTransition]>\\n  <app-page-header [icon1]=\\\"'fa-building'\\\" [heading1]=\\\"'Client'\\\"></app-page-header>\\n  <ng-template #spinner>\\n    <div class=\\\"spinner padding-top justify-content-md-center\\\">\\n      <div class=\\\"bounce1\\\"></div>\\n      <div class=\\\"bounce2\\\"></div>\\n      <div class=\\\"bounce3\\\"></div>\\n    </div>\\n  </ng-template>\\n  <div class=\\\"row\\\" *ngIf=\\\"listReturned == true; else spinner\\\">\\n    <div class=\\\"col-md-7\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"search...\\\"\\n            [(ngModel)]=\\\"currSearchTxt\\\" /></div>\\n      </div>\\n      <div class=\\\"table-responsive mt-2 table-wrapper-scroll-y my-custom-scrollbar\\\" [style.height.px]=\\\"screenHeight\\\">\\n        <table class=\\\"table table-hover table-striped\\\">\\n          <thead>\\n            <tr>\\n              <th>\\n                Name\\n              </th>\\n              <th>\\n                Phone\\n              </th>\\n              <th>\\n                Email\\n              </th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr *ngFor=\\\"let cl of clientList.list | filter: currSearchTxt | paginate: paginateConfig; let i = index\\\"\\n              (click)=\\\"setModel(cl.id)\\\">\\n              <td>\\n                {{ cl.name }}\\n              </td>\\n              <td>\\n                {{ cl.phone }}\\n              </td>\\n              <td>\\n                {{ cl.email }}\\n              </td>\\n              <!-- <td width=\\\"140\\\">\\n                <app-action [trashContent]=\\\"trashContent\\\" [uploadContent]=\\\"uploadContent\\\"\\n                  [downloadContent]=\\\"downloadContent\\\" [id]=\\\"cl.id\\\" [isTrash]=\\\"trash\\\" [isUpload]=\\\"upload\\\"\\n                  [isDownload]=\\\"download\\\" (upload)=\\\"open($event)\\\" (download)=\\\"open($event)\\\" (trash)=\\\"open($event)\\\">\\n                </app-action>\\n              </td> -->\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"col-12 justify-content-center mb-5\\\" *ngIf=\\\"clientList.noOfRecords > properties.ITEMSPERPAGE\\\">\\n        <pagination-controls (pageChange)=\\\"pageChanged($event)\\\"></pagination-controls>\\n      </div>\\n    </div>\\n    <div class=\\\" col-md-5\\\">\\n      <form name=\\\"form\\\" id=\\\"clientForm\\\" (ngSubmit)=\\\"f.form.valid && create(f)\\\" #f=\\\"ngForm\\\" novalidate>\\n        <div class=\\\"row text-center\\\" *ngIf=\\\"loggedInRole != 'User'\\\">\\n          <div class=\\\"col-md-12 form-group\\\">\\n            <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">\\n              Add\\n            </button>\\n            <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n              (click)=\\\"update(f)\\\">Update</button>\\n            <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n              (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n            <button type=\\\"button\\\" (click)=\\\"emptyForm(f)\\\" *ngIf=\\\"enableButtonType == '' || enableButtonType == 'U'\\\"\\n              class=\\\"btn btn-secondary ml-3\\\">\\n              {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n            </button>\\n\\n            <span class=\\\"pull-right\\\" *ngIf=\\\"showAction && readOnlyForm == 'U'\\\">\\n              <div class=\\\"dropdown theme-dropdown clearfix\\\" placement=\\\"bottom-right\\\" ngbDropdown>\\n                <!-- <button class=\\\"btn btn-secondary\\\" >\\n                        Dropdown\\n                    </button> -->\\n                <i class=\\\"fa fa-bars\\\" ngbDropdownToggle></i>\\n                <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" ngbDropdownMenu>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"editForm()\\\">Edit</a>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"emptyForm(f)\\\">New</a>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"open(model.id, uploadContent)\\\">File Upload</a>\\n                  <a class=\\\"dropdown-item drop-list\\\" (click)=\\\"open(model.id, trashContent)\\\">Delete</a>\\n                </div>\\n              </div>\\n            </span>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"readOnlyForm == 'U'; else notRead\\\">\\n\\n          <table class=\\\"table table-borderless table-striped\\\">\\n            <tbody>\\n              <tr *ngIf=\\\"model.name\\\">\\n                <th>Client Name</th>\\n                <td>{{ model.name }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.contactPersonName\\\">\\n                <th>Contact Person Name</th>\\n                <td>{{ model.contactPersonName }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.contactPersonDesignation\\\">\\n                <th>Contact Person Designation</th>\\n                <td>{{ model.contactPersonDesignation }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.industryType.name\\\">\\n                <th>Industry Type</th>\\n                <td>{{ model.industryType.name }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.website\\\">\\n                <th>Website</th>\\n                <td>{{ model.website }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.phone\\\">\\n                <th>Phone</th>\\n                <td>{{ model.phone }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.email\\\">\\n                <th>Email</th>\\n                <td>{{ model.email }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.guaranteePeriod\\\">\\n                <th>Guarantee Period</th>\\n                <td>{{ model.guaranteePeriod }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.creditPeriod\\\">\\n                <th>Credit Period</th>\\n                <td>{{ model.creditPeriod }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.servicetaxNo\\\">\\n                <th>Service Tax no.</th>\\n                <td>{{ model.servicetaxNo }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.serviceCharge\\\">\\n                <th>Service Charge</th>\\n                <td>{{ model.serviceCharge }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.gst\\\">\\n                <th>GST</th>\\n                <td>{{ model.gst }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.description\\\">\\n                <th>Description</th>\\n                <td>\\n                  <p [innerHTML]=\\\"model.description\\\"></p>\\n                </td>\\n              </tr>\\n              <tr *ngIf=\\\"model.address\\\">\\n                <th>Address</th>\\n                <td>{{ model.address }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.mapLocation\\\">\\n                <th>Map Location</th>\\n                <td>{{ model.mapLocation }}</td>\\n              </tr>\\n              <tr *ngIf=\\\"model.address != model.billingAddress\\\">\\n                <th>Billing Address</th>\\n                <td>{{ model.billingAddress }}</td>\\n              </tr>\\n              <tr *ngFor=\\\"let ap of model.properties\\\">\\n                <th>{{ ap.name }}</th>\\n                <td>{{ ap.value }}</td>\\n              </tr>\\n              <tr *ngFor=\\\"let cc of model.clientContacts\\\">\\n                <th>Contact</th>\\n                <td>\\n                  {{ cc.fullname }}<br />\\n                  {{ cc.email }}<br />\\n                  {{ cc.phone }}\\n                </td>\\n              </tr>\\n              <tr *ngFor=\\\"let fl of model.files\\\">\\n                <th>Files</th>\\n                <td class=\\\"file-download\\\" (click)=\\\"downloadFile(fl.id)\\\">{{ fl.fileName }}</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <ng-template #notRead>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Client Name<span class=\\\"required\\\">*</span></label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.name\\\" name=\\\"code\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && code.invalid }\\\" #code=\\\"ngModel\\\" #clientName\\n                  (blur)=\\\"transformTitleCase(clientName)\\\" required />\\n                <div class=\\\"invalid-feedback\\\">\\n                  client name is mandatory\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Industry Type</label>\\n                <select class=\\\"form-control \\\" [disabled]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.industryId\\\"\\n                  name=\\\"industryType\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && industryType.invalid }\\\" #con=\\\"ngModel\\\">\\n                  <option *ngFor=\\\"let itl of itList.list\\\" [ngValue]=\\\"itl.id\\\">{{ itl.name }}</option>\\n                </select>\\n                <div class=\\\"invalid-feedback\\\">\\n                  Consultant is mandatory\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-3\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Salutation<span class=\\\"required\\\">*</span></label>\\n                <select class=\\\"form-control\\\" name=\\\"gender\\\" [disabled]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.salutation\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && gender.invalid }\\\"\\n                  #gender=\\\"ngModel\\\" required>\\n                  <option *ngFor=\\\"let cs of properties.SALUTATION\\\">\\n                    {{ cs }}\\n                  </option>\\n                </select>\\n                <div class=\\\"invalid-feedback\\\">\\n                  gender is mandatory\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-5\\\" style=\\\"margin-left:-20px;\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Contact Person Name</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.contactPersonName\\\"\\n                  name=\\\"cpn\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && cpn.invalid }\\\" #cpn=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-4\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Designation</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.contactPersonDesignation\\\" name=\\\"cpd\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && cpd.invalid }\\\" #cpd=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Phone</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.phone\\\" name=\\\"phone\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && phone.invalid }\\\" #phone=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Email</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.email\\\" name=\\\"email\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && email.invalid }\\\" #email=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Guarantee Period</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.guaranteePeriod\\\" name=\\\"guaranteePeriod\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && guaranteePeriod.invalid }\\\" #guaranteePeriod=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Credit Period</label>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.creditPeriod\\\" name=\\\"creditPeriod\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && creditPeriod.invalid }\\\" #creditPeriod=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Service Tax no</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.servicetaxNo\\\"\\n                  name=\\\"servicetaxNo\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && servicetaxNo.invalid }\\\"\\n                  #servicetaxNo=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Service Charge</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.serviceCharge\\\"\\n                  name=\\\"serviceCharge\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && serviceCharge.invalid }\\\"\\n                  #serviceCharge=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>GST</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.gst\\\" name=\\\"gst\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && gst.invalid }\\\" #gst=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Website</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.website\\\" name=\\\"web\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && web.invalid }\\\" #web=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n                <input type=\\\"checkbox\\\" [(ngModel)]=\\\"model.shareContactInfo\\\"\\n                  name=\\\"shareContactInfo\\\" />&nbsp;\\n                  <label>Share Contact Info</label>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\" *ngIf=\\\"model.properties.length > 0\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Additional Properties</label>\\n                <div class=\\\"row\\\" *ngFor=\\\"let ap of model.properties; let i = index\\\">\\n                  <div class=\\\"col-md-5 pt-2\\\">\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"ap.name\\\" class=\\\"form-control\\\" name=\\\"addPropName{{ i }}\\\"\\n                      [readonly]=\\\"readOnlyForm == 'R'\\\" />\\n                  </div>\\n                  <div class=\\\"col-md-5 pt-2\\\">\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"ap.value\\\" class=\\\"form-control\\\" name=\\\"addPropValue{{ i }}\\\"\\n                      [readonly]=\\\"readOnlyForm == 'R'\\\" />\\n                  </div>\\n                  <div class=\\\"col-md-2\\\">\\n                    <i class=\\\"fa fa-minus\\\" aria-hidden=\\\"true\\\" id=\\\"decrease\\\" *ngIf=\\\"enableButtonType != 'E'\\\"\\n                      (click)=\\\"propertiesListIncrement($event.target, i)\\\"></i>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Description</label>\\n                <angular-editor [(ngModel)]=\\\"model.description\\\" name=\\\"description\\\" [config]=\\\"config\\\"></angular-editor>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Address</label>\\n                <textarea class=\\\"form-control\\\" cols=\\\"5\\\" rows=\\\"5\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.address\\\" name=\\\"add\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && add.invalid }\\\"\\n                  #add=\\\"ngModel\\\"></textarea>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12 pb-2\\\">\\n              <input type=\\\"checkbox\\\" class=\\\"\\\" [(ngModel)]=\\\"address\\\" (change)=\\\"billngAddressMatch()\\\"\\n                name=\\\"interviewCheckbox\\\" />&nbsp;<label>Billing address is same as address</label>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Billing Address</label>\\n                <textarea class=\\\"form-control\\\" cols=\\\"5\\\" rows=\\\"5\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                  [(ngModel)]=\\\"model.billingAddress\\\" name=\\\"billingAddress\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': f.submitted && billingAddress.invalid }\\\"\\n                  #billingAddress=\\\"ngModel\\\"></textarea>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Map Location</label>\\n                <input class=\\\"form-control\\\" [readonly]=\\\"readOnlyForm == 'R'\\\" [(ngModel)]=\\\"model.mapLocation\\\"\\n                  name=\\\"mapLoc\\\" [ngClass]=\\\"{ 'is-invalid': f.submitted && web.invalid }\\\" #mapLoc=\\\"ngModel\\\" />\\n              </div>\\n            </div>\\n          </div>\\n          <strong>Add Contacts</strong>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"table-responsive\\\">\\n              <table class=\\\"table table-hover table-striped\\\">\\n                <tbody>\\n                  <tr *ngFor=\\\"let cc of model.clientContacts; let i = index\\\">\\n                    <td>\\n                      <input class=\\\"form-control form-control-sm\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                        [(ngModel)]=\\\"cc.fullname\\\" name=\\\"fullname{{ i }}\\\"\\n                        [ngClass]=\\\"{ 'is-invalid': f.submitted && fullname.invalid }\\\" placeholder=\\\"fullname\\\"\\n                        #fullname=\\\"ngModel\\\" />\\n                    </td>\\n                    <td>\\n                      <input class=\\\"form-control form-control-sm\\\" type=\\\"email\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                        [(ngModel)]=\\\"cc.email\\\" name=\\\"email{{ i }}\\\"\\n                        [ngClass]=\\\"{ 'is-invalid': f.submitted && email.invalid }\\\" placeholder=\\\"email\\\"\\n                        #email=\\\"ngModel\\\" />\\n                    </td>\\n                    <td>\\n                      <!--pattern=\\\"/^-?\\\\d+\\\\.?\\\\d*$/\\\" onKeyPress=\\\"if(this.value.length==12) return false;\\\"-->\\n                      <input class=\\\"form-control form-control-sm\\\" type=\\\"string\\\" [readonly]=\\\"readOnlyForm == 'R'\\\"\\n                        [(ngModel)]=\\\"cc.phone\\\" name=\\\"phone{{ i }}\\\"\\n                        [ngClass]=\\\"{ 'is-invalid': f.submitted && phone.invalid }\\\" placeholder=\\\"phone\\\"\\n                        #phone=\\\"ngModel\\\" />\\n                    </td>\\n                    <td width=\\\"20\\\">\\n                      <i class=\\\"fa fa-minus\\\" *ngIf=\\\"model.clientContacts.length > 1\\\" style=\\\"font-size:15px\\\"\\n                        aria-hidden=\\\"true\\\" id=\\\"decrease\\\" (click)=\\\"contactListIncrement($event.target, i)\\\"></i>\\n                      <i class=\\\"fa fa-plus\\\" style=\\\"font-size:15px\\\" *ngIf=\\\"i + 1 == model.clientContacts.length\\\"\\n                        aria-hidden=\\\"true\\\" id=\\\"increase\\\" (click)=\\\"contactListIncrement($event.target, i)\\\"></i>\\n                    </td>\\n                  </tr>\\n                </tbody>\\n              </table>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Additional Properties</label>\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col-md-5\\\">\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"apName\\\" class=\\\"form-control\\\" name=\\\"apName\\\"\\n                      [readonly]=\\\"readOnlyForm == 'R'\\\" />\\n                  </div>\\n                  <div class=\\\"col-md-5\\\">\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"apValue\\\" class=\\\"form-control\\\" name=\\\"apValue\\\"\\n                      [readonly]=\\\"readOnlyForm == 'R'\\\" />\\n                  </div>\\n                  <div class=\\\"col-md-2\\\">\\n                    <i class=\\\"fa fa-plus\\\" aria-hidden=\\\"true\\\" id=\\\"increase\\\" *ngIf=\\\"enableButtonType != 'E'\\\"\\n                      (click)=\\\"propertiesListIncrement($event.target, 0)\\\"></i>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"modal-body\\\" *ngIf=\\\"model?.files?.length > 0\\\">\\n                <table class=\\\"table\\\">\\n                  <thead>\\n                    <th>File Name</th>\\n                    <th>Description</th>\\n                    <th>Action</th>\\n                  </thead>\\n                  <tbody *ngFor=\\\"let fl of model.files\\\">\\n                    <td>{{ fl.fileName }}</td>\\n                    <td>{{ fl.Description }}</td>\\n                    <td>\\n                      <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm\\\"\\n                        (click)=\\\"downloadFile(fl.id)\\\">Download</button>\\n                    </td>\\n                  </tbody>\\n                </table>\\n              </div>\\n            </div>\\n          </div>\\n        </ng-template>\\n\\n        <div class=\\\"row text-center\\\" *ngIf=\\\"loggedInRole != 'User'\\\">\\n          <div class=\\\"col-md-12 form-group\\\">\\n            <button type=\\\"submit\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\"\\n              [disabled]=\\\"f.form.pristine || f.form.invalid || isCreate\\\">\\n              Add\\n            </button>\\n            <button type=\\\"button\\\" *ngIf=\\\"enableButtonType == 'U'\\\" class=\\\"btn btn-secondary ml-2\\\"\\n              (click)=\\\"update(f)\\\">Update</button>\\n            <!-- <button *ngIf=\\\"enableButtonType == 'E'\\\" class=\\\"btn btn-secondary ml-2\\\" type=\\\"button\\\"\\n                  (click)=\\\"enableFormEditable()\\\">Edit</button> -->\\n            <button type=\\\"button\\\" (click)=\\\"emptyForm(f)\\\" *ngIf=\\\"enableButtonType == ''\\\" class=\\\"btn btn-secondary ml-3\\\">\\n              {{ enableButtonType != '' ? 'Close' : 'Clear' }}\\n            </button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n<ng-template #trashContent let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n  <div class=\\\"modal-header modal-popup-header-bg\\\">\\n    <h4 class=\\\"modal-title\\\">{{ properties.APP_STATUS }}</h4>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <p>{{ properties.CONFIRM_DELETE }} ? &hellip;</p>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"trash()\\\">Ok</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Close</button>\\n  </div>\\n</ng-template>\\n\\n<ng-template #uploadContent let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n  <div class=\\\"modal-header modal-popup-header-bg\\\">\\n    <h4 class=\\\"modal-title\\\">{{ properties.UPLOAD }}</h4>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <input class=\\\"form-control\\\" type=\\\"file\\\" ng2FileSelect [uploader]=\\\"uploader\\\" />\\n    <textarea class=\\\"form-control mt-3\\\" placeholder=\\\"Comments\\\" cols=\\\"5\\\" rows=\\\"5\\\" [(ngModel)]=\\\"comments\\\"></textarea>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"uploadFiles()\\\">Upload</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Close</button>\\n  </div>\\n</ng-template>\\n\\n<ng-template #downloadContent let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n  <div class=\\\"modal-header modal-popup-header-bg\\\">\\n    <h4 class=\\\"modal-title\\\">Client {{ properties.DOWNLOAD }}</h4>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\" *ngIf=\\\"model.files.length > 0; else emptyMsg\\\">\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <th>File Name</th>\\n        <th>Description</th>\\n        <th>Action</th>\\n      </thead>\\n      <tbody *ngFor=\\\"let fl of model.files\\\">\\n        <td>{{ fl.fileName }}</td>\\n        <td>{{ fl.Description }}</td>\\n        <td>\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm\\\" (click)=\\\"downloadFile(fl.id)\\\">Download</button>\\n        </td>\\n      </tbody>\\n    </table>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"c('Close click')\\\">Close</button>\\n  </div>\\n</ng-template>\\n<ng-template #emptyMsg>\\n  <h3 class=\\\"text-center\\\">No Files to download</h3>\\n</ng-template>\\n\"","module.exports = \".my-custom-scrollbar {\\n  position: relative;\\n  height: 31.5em;\\n  overflow: auto; }\\n\\n.table-wrapper-scroll-y {\\n  display: block; }\\n\\n.required {\\n  color: red; }\\n\\n.padding-top {\\n  padding-top: 60px; }\\n\\n.dropdown-toggle::after {\\n  display: none; }\\n\\n.drop-list:hover {\\n  cursor: pointer; }\\n\\n.file-download:hover {\\n  cursor: pointer;\\n  color: blue;\\n  text-decoration: underline; }\\n\\n.table-striped tbody tr:nth-of-type(odd) {\\n  background-color: #c1c1c1; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2NsaWVudC9EOlxcQ0NQVCBNQUlOXFx0cnVua1xcY2NwdC1wYXJlbnRcXGNjcHQtd2ViXFxzcmNcXG1haW5cXHdlYi9zcmNcXGFwcFxcbGF5b3V0XFxjbGllbnRcXGNsaWVudC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFrQjtFQUNsQixlQUFjO0VBQ2QsZUFBYyxFQUNiOztBQUNEO0VBQ0EsZUFBYyxFQUNiOztBQUNIO0VBQ0UsV0FBVSxFQUNYOztBQUNEO0VBQ0Usa0JBQWlCLEVBQ2xCOztBQUNEO0VBQ0UsY0FBWSxFQUNiOztBQUNEO0VBQ0UsZ0JBQWUsRUFDaEI7O0FBQ0Q7RUFDRSxnQkFBZTtFQUNmLFlBQVU7RUFDViwyQkFBMEIsRUFDMUI7O0FBQ0Q7RUFFRywwQkFBeUIsRUFDMUIiLCJmaWxlIjoic3JjL2FwcC9sYXlvdXQvY2xpZW50L2NsaWVudC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5teS1jdXN0b20tc2Nyb2xsYmFyIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiAzMS41ZW07XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgfVxyXG4gIC50YWJsZS13cmFwcGVyLXNjcm9sbC15IHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICB9XHJcbi5yZXF1aXJlZCB7XHJcbiAgY29sb3I6IHJlZDsgXHJcbn1cclxuLnBhZGRpbmctdG9we1xyXG4gIHBhZGRpbmctdG9wOiA2MHB4O1xyXG59XHJcbi5kcm9wZG93bi10b2dnbGU6OmFmdGVye1xyXG4gIGRpc3BsYXk6bm9uZTtcclxufVxyXG4uZHJvcC1saXN0OmhvdmVye1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4uZmlsZS1kb3dubG9hZDpob3ZlcntcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgY29sb3I6Ymx1ZTtcclxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuIH1cclxuIC50YWJsZS1zdHJpcGVkIHtcclxuICB0Ym9keSB0cjpudGgtb2YtdHlwZShvZGQpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMWMxYzE7XHJcbiAgfVxyXG59Il19 */\"","import { Component, OnInit, HostListener } from \"@angular/core\";\nimport { routerTransition } from \"../../router.animations\";\nimport {\n  NgbModal,\n  ModalDismissReasons,\n  NgbModalRef\n} from \"@ng-bootstrap/ng-bootstrap\";\nimport { URLConstants } from \"../components/constants/url-constants\";\nimport { Properties } from \"../components/constants/properties\";\nimport { NgForm } from \"@angular/forms\";\nimport { ClientModel } from \"./client.model\";\nimport { FileUploader, FileLikeObject } from \"ng2-file-upload\";\nimport { AdditionalPropertiesModel } from \"src/app/additional-properties.model\";\nimport { AngularEditorConfig } from \"@kolkov/angular-editor\";\nimport { Router } from \"@angular/router\";\nimport {\n  StorageService,\n  HttpClientService,\n  ToastrCustomService\n} from \"../../shared/services\";\n@Component({\n  selector: \"app-client\",\n  templateUrl: \"./client.component.html\",\n  styleUrls: [\"./client.component.scss\"],\n  animations: [routerTransition()]\n})\nexport class ClientComponent implements OnInit {\n  public model: ClientModel = <ClientModel>{};\n  public clientList: any = [];\n  public itList:any = [];\n  public currSearchTxt = \"\";\n  public urlConstants = new URLConstants();\n  public properties = new Properties();\n  public readOnlyForm: any = \"\";\n  public enableButtonType: any = \"\";\n  public comments = \"\";\n  public uploader: FileUploader = new FileUploader({});\n  public fileList: Array<any> = [];\n  public address = false;\n  public showAction: boolean = false;\n  public action: string;\n\n  private selectedRecrdToDel = 0;\n  public closeResult = \"\";\n  private modalRef: NgbModalRef;\n  public screenHeight: any;\n  public download = \"download\";\n  public upload = \"upload\";\n  public apName = \"\";\n  public apValue = \"\";\n  public loggedInRole: any = \"\";\n  public isCreate: boolean = false;\n  public listReturned: boolean;\n  public getAllIT = this.http.get(this.urlConstants.ITGetAll + '0&pageSize=100000&sortBy=id');\n  public config: AngularEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: \"15rem\",\n    minHeight: \"5rem\",\n    translate: \"no\"\n  };\n  public paginateConfig: any = {\n    itemsPerPage: this.properties.ITEMSPERPAGE,\n    currentPage: 1,\n    totalItems: 0\n  };\n  constructor(\n    private http: HttpClientService,\n    private toastr: ToastrCustomService,\n    private modalService: NgbModal,\n    private router: Router,\n    private storageService: StorageService\n  ) {\n    this.getScreenSize();\n  }\n  @HostListener(\"window:resize\", [\"$event\"])\n  private getScreenSize(event?) {\n    this.screenHeight = window.innerHeight;\n  }\n  ngOnInit() {\n    /*Autheticate user with the token */\n    if (!this.http.isAuthenticate()) {\n      this.router.navigate([\"/login\"]);\n    }\n    this.loggedInRole = sessionStorage.getItem(\"role\");\n    this.init();\n    this.setClientContactModel();\n    this.initialGetAll();\n    this.getIndustryType();\n    this.spinner(true);\n    this.storageService.clientId = null;\n  }\n  init() {\n    this.model.properties = [];\n    this.model.files = [];\n    this.model.serviceCharge = \"8.33\";\n    this.model.guaranteePeriod = \"3 months\";\n    this.model.creditPeriod = \"1 month\";\n    this.model.phone = \"+91 \";\n    this.setAdditionalDefaultProps();\n  }\n  private getIndustryType(){\n    this.getAllIT.subscribe(resp =>{\n      this.itList = resp as any;\n    })\n  }\n  private setClientContactModel() {\n    this.model.clientContacts = [\n      { fullname: \"\", email: \"\", phone: \"+91 \" }\n    ];\n  }\n\n  public initialGetAll() {\n    let pageNumber = this.paginateConfig.currentPage - 1;\n    let temp = this.http.get(\n      this.urlConstants.ClientGetAll + pageNumber + \"&pageSize=50&sortBy=id\"\n    );\n    temp.subscribe(resp => {\n      this.clientList = resp as any;\n      //this.pageChange(this.page);\n      this.paginateConfig.totalItems = this.clientList.noOfRecords;\n    });\n  }\n  private spinner(isSpinner: boolean) {\n    this.listReturned = isSpinner;\n  }\n  private setAdditionalDefaultProps() {\n    this.model.properties.push(\n      <AdditionalPropertiesModel>{ name: \"Company Size\", value: \"\" },\n      <AdditionalPropertiesModel>{ name: \"Establishment Year\", value: \"\" },\n      <AdditionalPropertiesModel>{ name: \"Branches\", value: \"\" },\n      <AdditionalPropertiesModel>{ name: \"Certification\", value: \"\" }\n    );\n  }\n  public editForm(): void {\n    this.readOnlyForm = \"\";\n    this.enableButtonType = \"U\";\n  }\n  public setModel(id) {\n    this.getById(id);\n    this.readOnlyForm = \"U\";\n    this.enableButtonType = \"E\";\n    this.showAction = true;\n  }\n  private getById(id) {\n    this.spinner(false);\n    const temp = this.http.get(this.urlConstants.ClientGetById + id);\n    temp.subscribe(resp => {\n      this.model = this.mapToUpdateModel(resp);\n      // tslint:disable-next-line:no-shadowed-variable\n      if (this.model.properties == null) {\n        this.model.properties = [];\n      }\n      this.spinner(true);\n    });\n  }\n  private mapToUpdateModel(response) {\n    const temp = response;\n    this.model = temp;\n    this.model[\"industryId\"] = temp.industryType.id;\n    return this.model;\n  }\n  private formReset() {\n    this.model = <ClientModel>{ properties: [] };\n    this.model.serviceCharge = \"8.33\";\n    this.model.guaranteePeriod = \"3 months\";\n    this.model.creditPeriod = \"1 month\";\n    this.model.phone = \"+91 \";\n  }\n  public create(clientForm: NgForm): void {\n    if (!this.http.checkAdditionPropValueExist(this.model.properties)) {\n      this.toastr.error(\n        \"Please provide all property values\",\n        this.properties.CLIENT\n      );\n    } else {\n      this.isCreate = true;\n      this.spinner(false);\n      const temp = this.http.post(this.model, this.urlConstants.ClientCreate);\n      temp.subscribe(\n        resp => {\n          this.successHandle();\n          clientForm.resetForm();\n          this.setClientContactModel();\n          this.isCreate = false;\n          this.paginateConfig.currentPage = 1;\n          this.initialGetAll();\n          this.createCPReq(resp);\n        },\n        err => {\n          this.errorHandle(err);\n          this.isCreate = false;\n        }\n      );\n    }\n  }\n  private successHandle() {\n    this.toastr.success(this.properties.CREATE, this.properties.CLIENT);\n    this.init();\n    this.formReset();\n    this.spinner(true);\n  }\n  private createCPReq(resp: any) {\n    let decision = confirm(this.properties.CONFIRM_CP_NEW);\n    if (decision == true) {\n      /**set consultant id in storage service*/\n      this.storageService.clientId = resp.id;\n      this.router.navigate([\"/layout/client-position\"]);\n    }\n  }\n  public update(clientForm: NgForm) {\n    this.spinner(false);\n    const temp = this.http.update(this.model, this.urlConstants.ClientUpdate);\n    temp.subscribe(\n      resp => {\n        this.successHandle();\n        this.setClientContactModel();\n        clientForm.resetForm();\n        this.initialGetAll();\n        this.readOnlyForm = \"\";\n        this.enableButtonType = \"\";\n        this.showAction = false;\n      },\n      err => {\n        this.errorHandle(err);\n      }\n    );\n  }\n  public emptyForm(cchForm: NgForm) {\n    cchForm.resetForm();\n    this.formReset();\n    this.readOnlyForm = \"\";\n    this.enableButtonType = \"\";\n    this.showAction = false;\n    this.init();\n    this.setClientContactModel();\n  }\n  public contactListIncrement(event, i: number) {\n    switch (event.id) {\n      case \"decrease\": {\n        this.model.clientContacts.splice(i, 1);\n        break;\n      }\n      case \"increase\": {\n        this.model.clientContacts.push({\n          fullname: \"\",\n          email: \"\",\n          phone: \"+91 \"\n        });\n        break;\n      }\n    }\n  }\n  public propertiesListIncrement(event, i: number) {\n    switch (event.id) {\n      case \"decrease\": {\n        this.model.properties.splice(i, 1);\n        break;\n      }\n      case \"increase\": {\n        if (this.model.properties == null) {\n          this.model.properties = [];\n          this.model.properties.push(<AdditionalPropertiesModel>{\n            name: this.apName,\n            value: this.apValue\n          });\n          this.apName = \"\";\n          this.apValue = \"\";\n        } else if (this.model.properties.length == 0) {\n          this.model.properties.push(<AdditionalPropertiesModel>{\n            name: this.apName,\n            value: this.apValue\n          });\n          this.apName = \"\";\n          this.apValue = \"\";\n        } else {\n          let propertyExist: boolean;\n          for (let i = 0; i < this.model.properties.length; i++) {\n            if (\n              this.model.properties[i].name == this.apName &&\n              this.model.properties[i].value == this.apValue\n            ) {\n              propertyExist = true;\n            } else {\n              propertyExist = false;\n            }\n          }\n          if (propertyExist) {\n            this.toastr.error(\n              this.properties.PROPERTY_EXIST,\n              this.properties.PROPERTIES\n            );\n          } else {\n            this.model.properties.push(<AdditionalPropertiesModel>{\n              name: this.apName,\n              value: this.apValue\n            });\n            this.apName = \"\";\n            this.apValue = \"\";\n          }\n        }\n        break;\n      }\n    }\n  }\n  public billngAddressMatch() {\n    if (this.address === true) {\n      this.model.billingAddress = this.model.address;\n    } else {\n      this.model.billingAddress = \"\";\n    }\n  }\n  public trash(): void {\n    this.spinner(false);\n    const temp = this.http.delete(\n      this.urlConstants.ClientDelete + this.selectedRecrdToDel\n    );\n    temp.subscribe(\n      resp => {\n        this.successHandle();\n        this.close();\n        this.readOnlyForm = \"\";\n        this.enableButtonType = \"\";\n        this.showAction = false;\n        this.initialGetAll();\n      },\n      err => {\n        this.errorHandle(err);\n      }\n    );\n  }\n  private errorHandle(err: any) {\n    this.toastr.error(err.error.message, this.properties.CLIENT);\n    this.spinner(true);\n  }\n  public getFilesById(id: number) {\n    this.spinner(false);\n    this.http.get(\"/uploadFile/id?id=\" + id).subscribe(resp => {\n      this.fileList.push(resp);\n      this.spinner(true);\n    });\n  }\n  /**\n   * @param\n   * 1) content consists the modal instance\n   * 2) Selected contains the code of selected row\n   */\n  public open(event: any, content: any) {\n    this.selectedRecrdToDel = 0;\n    if (event) {\n      this.selectedRecrdToDel = event;\n    }\n    this.modalRef = this.modalService.open(content);\n    this.modalRef.result.then(\n      result => {\n        this.closeResult = `Closed with: ${result}`;\n      },\n      reason => {\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n      }\n    );\n  }\n  public close() {\n    this.modalRef.close();\n  }\n  private getDismissReason(reason: any): string {\n    if (reason === ModalDismissReasons.ESC) {\n      return \"by pressing ESC\";\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return \"by clicking on a backdrop\";\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n  /** Get Uploaded files */\n  private getFiles(): FileLikeObject[] {\n    return this.uploader.queue.map(fileItem => {\n      return fileItem.file;\n    });\n  }\n  /**Download file */\n  public downloadFile(id: number) {\n    this.http.get(this.urlConstants.FileDownload + id).subscribe(\n      resp => {},\n      err => {\n        if (err.status == 200) window.open(err.url);\n      }\n    );\n  }\n  /** Upload documents of respective consultant */\n  public uploadFiles() {\n    const files = this.getFiles();\n    const formData = new FormData();\n    formData.append(\"file\", files[0].rawFile, files[0].name);\n    const params =\n      \"refId=\" +\n      this.selectedRecrdToDel +\n      \"&refType=Client&comments=\" +\n      this.comments;\n    this.http.upload(this.urlConstants.FileUpload + params, formData).subscribe(\n      resp => {\n        let temp: any = resp;\n        this.uploader = new FileUploader({});\n        this.toastr.success(temp.message, \"Client\");\n        this.close();\n      },\n      err => {\n        this.toastr.success(err.error.message, \"Client\");\n      }\n    );\n  }\n  public transformTitleCase(ip: HTMLInputElement) {\n    let temp =\n      ip.value.length === 0\n        ? \"\"\n        : ip.value.replace(\n            /\\w\\S*/g,\n            txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()\n          );\n    ip.value = temp;\n  }\n  pageChanged(event) {\n    this.paginateConfig.currentPage = event;\n    this.initialGetAll();\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport {\n  PageHeaderModule,\n  SharedPipesModule,\n  ActionListModule\n} from \"../../shared\";\nimport { ClientComponent } from \"./client.component\";\nimport { ClientRoutingModule } from \"./client-routing.module\";\nimport { NgbModule, NgbActiveModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { AngularEditorModule } from \"@kolkov/angular-editor\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ClientRoutingModule,\n    FormsModule,\n    NgxPaginationModule,\n    PageHeaderModule,\n    SharedPipesModule,\n    NgbModule,\n    FileUploadModule,\n    ActionListModule,\n    AngularEditorModule\n  ],\n\n  declarations: [ClientComponent],\n  providers: [NgbActiveModal]\n})\nexport class ClientModule {}\n"],"sourceRoot":""}